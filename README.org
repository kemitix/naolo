* naolo

  Clean Architecture Example of the Pet Clinic, providing alternative Presenters and Gateway implementations.

  * The original [[https://github.com/spring-projects/spring-petclinic][Spring PetClinic Sample Application]], which this project takes as its inspiration.


* Clean Architecture and Plugins

  One of the most important aspects of a [[https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html][Clean Architecture]] is that your main
  business code should not have a dependency upon any third-party code. e.g. a
  Web Framework, or a Database. These aspects should be made available through a
  plugin architecture. Your code provides a set of interfaces that these plugins
  implement. The following diagrams show two different arrangements of the
  project using different sets of plugins.


* Implementations

  There are two implementations of the example provided, both based on the same
  =core= and =entites= modules. Each provides a different implementation of the
  =presenter-rest= and =gateway-data= plugins.


** Apache Meecrowave with JAX-RS and Apache DeltaSpike Data

   A REST web interface is implemented using [[https://jax-rs.github.io/apidocs/2.1/][JAX-RS]] and database services using
   [[https://deltaspike.apache.org/documentation/data.html][DeltaSpike Data]]. These are provided as plugins using the
   =presenter-rest-jaxrs= and =gateway-data-deltaspike= modules.

   This configuration uses [[http://openwebbeans.apache.org/meecrowave/][Meecrowave]] as its environment, via the
   =run-meecrowave-deltaspike= module.

   [[file:/doc/images/module-dependencies-meecrowave-deltaspike.png]]

   This Meecrowave/JAX-RS/DeltaSpike version can be built and run from source using:

   #+BEGIN_SRC bash
   ./bin/meecrowave-deltaspike-run.sh
   #+END_SRC


** Apache Meecrowave with JAX-RS and pure JPA

   A REST web interface is implemented using [[https://jax-rs.github.io/apidocs/2.1/][JAX-RS]] and database services using
   pure [[http://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html][JPA]]. These are provided as plugins using the =presenter-rest-jaxrs= and
   =gateway-data-jpa= modules.

   This configuration uses [[http://openwebbeans.apache.org/meecrowave/][Meecrowave]] as its environment, via the
   =run-meecrowave-jpa= module.

   [[file:/doc/images/module-dependencies-meecrowave-jpa.png]]

   This Meecrowave/JAX-RS/JPA version can be built and run from source using:

   #+BEGIN_SRC bash
   ./bin/meecrowave-jpa-run.sh
   #+END_SRC


* Packages

  The following shows the uses of each package for all implementations combined.
  Each line represents a direct reference to a package.

  [[file:/doc/images/digraph-all.png]]


* Pet Clinic

  Rather that attempt to implement the full website from the original example, I
  will be focusing on providing the services as a REST endpoint, upon which
  another application/service could be used to provide the website.

  In addition, as the existing Pet Clinic feels like a simple CRUD wrapper for a
  database, I will implement a simple Visit Booking endpoint, which will find
  available slots to schedule a Visit.

** Current Status

   Implementing the base CRUD-like Use Cases, and adding in the occasional new
   implementation configuration.

** Entities

  The PetClinic has the following domain:

  [[file:/doc/images/entities.png]]


*** Veterinarians


    * Id
    * Name
    * Speciality (optional)


*** Owners


    * Id
    * First Name
    * Last Name
    * Street
    * City
    * Telephone Number


*** Pets


    * Id
    * Name
    * Date-of-birth
    * Type (e.g. Dog, cat, etc)
    * Owner


*** Visits


    * Id
    * Pet
    * Veterinarian
    * Date
    * Description


** Values


*** Vet Specialisation


    * Radiology
    * Dentistry
    * Surgery


*** Pet Type


    * Dog
    * Cat
    * Snake
    * Other


** Use Cases

   Each Use Case represents a single REST endpoint, from which another
   application could provide a UI.


*** Veterinarians

**** List all Veterinarians

     =GET /vets=

     #+BEGIN_SRC java
       [
        {
            "id": 1,
                "name": "Conah Feeney",
                "specialisations": [
                                    "RADIOLOGY"
                                    ]
                },
        {
            "id": 2,
                "name": "Austin Santiago",
                "specialisations": [
                                    "DENTISTRY"
                                    ]
                },
        {
            "id": 3,
                "name": "Violet Holmes",
                "specialisations": [
                                    "DENTISTRY",
                                    "SURGERY"
                                    ]
                }
        ]
     #+END_SRC

**** Add a Veterinarian

     =POST /vet=

**** Get a Veterinarian

     =GET /vet/{id}=

**** Update a Veterinarian

     =POST /vet/{id}=

**** Remove a Veterinarian

     =DELETE /vet/{id}=


*** Visits

**** List all Visits during period

     =GET /visits?from={date}&until={date}=

     Should include all fields from Visits, plus:

     * Veterinarian.Name
     * Pet.Name
     * Pet.Type
     * Owner.LastName
     * Owner.Telephone


**** Add a Visit

     =POST /visit=

     Should be able to create new Pets and Owners as needed. Should not be able
     to create new Veterinarians.

**** Get a Visit

     =GET /visit/{id}=

     Should return all fields for Visit, Veterinarian, Pet and Owner.

**** Update a Visit

     =POST /visit/{id}=

     Should be able to update fields from Visit, Pet and Owner. Should not be
     able to update fields for a Veterinarian, but can change which Veterinarian
     the Visit is/was with.


*** Owners

**** Search for Owners by Surname

     =GET /owners?q={surname}=

     Should include all fields from Owner, plus a list of Pet.Name and Pet.Type
     plus all the fields from Visit for the most recent Visit for each Pet.

**** Get an Owner

     =GET /owner/{id}=

     Should include all the same fields as Searching for Owners by Surname.

**** Update Owner

     =POST /owner/{id}=

     Should only be able to modify fields on an existing Owner.


*** Pets

**** Search for Pets by Owner

     =GET /pets?owner={ownerId}=

     Should include all fields from Pets and Owner, plus all fields from the
     most recent Visit.

**** Get a Pet
      
     =GET /pet/{id}=

     Should include the same fields a Search for Pets by Owner.

**** Update Pet

     =POST /pet/{id}=

     Should only be able to modify fields on an existing Pet.
